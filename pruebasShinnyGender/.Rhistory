names(silinfo)
# Muestra los primeros 10 valores
head(silinfo$widths[, 1:3], 10)
# Valor medio de Silhouette para cada cluster
silinfo$clus.avg.widths
# Media de todos los valores de Silhouette para cada individuo
silinfo$avg.width
# Tama?o de cada cluster
km.res$size
# Elbow
fviz_nbclust(iris.NS, kmeans, method = "wss") +
geom_vline(xintercept = 4, linetype = 2)+
labs(subtitle = "Elbow")
fviz_nbclust(iris.NS, kmeans, method = "silhouette")+
labs(subtitle = "Silhouette")
set.seed(123)
fviz_nbclust(iris.NS, kmeans, nstart = 25,  method = "gap_stat", nboot = 50)+
labs(subtitle = "Gap")
table(iris$Species, km.res$cluster)
res<-NbClust(iris.NS, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
# Valor para cada ?ndice
res$All.index
# N?mero de clusters con mejor ?ndice
res$Best.nc
# Partici?n para mejor n?mero de clusters
res$Best.partition
res<-NbClust(iris.NS, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "silhouette")
res$All.index
res<-NbClust(iris.NS, diss=NULL, distance = "manhattan", min.nc=2, max.nc=6,
method = "complete", index = "all")
# Dibujamos un histograma con los ?ndices
fviz_nbclust(res)
res$All.index
res$Best.nc
res$Best.partition
table(iris$Species, km.res$cluster)
data(USArrests)
head(USArrests)
View(USArrests)
View(USArrests)
View(USArrests)
View(USArrests)
head(iris$Species)
head(USArrests$Murder)
scaled.dat <- scale(USArrests)
head(scaled.dat)
km.res <- eclust(scaled.dat, "kmeans", k = 3, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
# Dibujar gr?fica
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
km.res <- eclust(scaled.dat$Murder, "kmeans", k = 3, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
# Dibujar gr?fica
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
scaled.dat <- scale(USArrests)
head(scaled.dat)
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
# Valor para cada ?ndice
res$All.index
# N?mero de clusters con mejor ?ndice
res$Best.nc
# Partici?n para mejor n?mero de clusters
res$Best.partition
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "silhouette")
res$All.index
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "manhattan", min.nc=2, max.nc=6,
method = "complete", index = "all")
# Dibujamos un histograma con los ?ndices
fviz_nbclust(res)
res$All.index
res$Best.nc
res$Best.partition
```{r}
# clustering con K-means
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
scaled.dat <- scale(USArrests)
head(scaled.dat)
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
# Valor para cada ?ndice
res$All.index
# N?mero de clusters con mejor ?ndice
res$Best.nc
# Partici?n para mejor n?mero de clusters
res$Best.partition
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "silhouette")
res$All.index
res<-NbClust(scaled.dat$Murder, diss=NULL, distance = "manhattan", min.nc=2, max.nc=6,
method = "complete", index = "all")
# Dibujamos un histograma con los ?ndices
fviz_nbclust(res)
res$All.index
res$Best.nc
res$Best.partition
res$All.index
res$Best.partition
res$All.index
res$Best.nc
res$Best.partition
# Dibujamos un histograma con los ?ndices
fviz_nbclust(res)
res$All.index
res$Best.nc
res$Best.partition
km.res <- eclust(scaled.dat$Murder, "kmeans", k = 3, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
# Dibujar gr?fica
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
res<-NbClust(scaled.dat, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "dunn")
# Valor para cada ?ndice
res$All.index
# N?mero de clusters con mejor ?ndice
res$Best.nc
# Partici?n para mejor n?mero de clusters
res$Best.partition
res<-NbClust(scaled.dat, diss=NULL, distance = "euclidean", min.nc=2, max.nc=6,
method = "kmeans", index = "silhouette")
res$All.index
res<-NbClust(scaled.dat, diss=NULL, distance = "manhattan", min.nc=2, max.nc=6,
method = "complete", index = "all")
# Dibujamos un histograma con los ?ndices
fviz_nbclust(res)
res$All.index
res$Best.nc
res$Best.partition
# clustering con K-means
km.res <- eclust(scaled.dat, "kmeans", k = 2, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
# Dibujar gr?fica
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
km.res <- eclust(scaled.dat, "kmeans", k = 2, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
km.res <- eclust(scaled.dat, "kmeans", k = 4, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
sil <- silhouette(km.res$cluster, dist(iris.NS))
sil <- silhouette(scaled.dat$cluster, dist(iris.NS))
sil <- silhouette(scaled.dat$cluster, dist(scaled.dat))
sil <- silhouette(scaled.dat$cluster, dist(scaled.dat))
sil <- silhouette(km.res$cluster, dist(scaled.dat))
fviz_silhouette(sil)
km.res$size
rm(list=ls())
attach(iris)
data(iris)
head(iris)
table(Species)
vec<-c(1,1,1,0,0,3,3,3,3,2)
table(vec)
prop.table(table(Species))
range(Sepal.Length)
nclass.Sturges(Sepal.Length)
seq(4.3, 7.9,length=nclass.Sturges(Sepal.Length))
intervalos # Se muestran los intervalos, uno correspondiente a cada medida observada
intervalos=cut(Sepal.Length,breaks=seq(4.3,7.9,length=nclass.Sturges(Sepal.Length)),include.lowest=TRUE)
intervalos # Se muestran los intervalos, uno correspondiente a cada medida observada
table(intervalos)
prop.table(table(intervalos))
library(agricolae)
install.packages("agricolae")
library(agricolae)
library(agricolae)
install.packages("agricolae")
mi_moda<-function(var){
frec.var<-table(var)
valor<-which(frec.var==max(frec.var)) # Elementos con el valor m?ximo
names(valor)
}
mi_moda(Species)
mi_moda(vec)
vec<-rnorm(10,20,10)
vec<-rnorm(10,20,10)
vec
mean(vec)
vec.ruid<-c(vec,rnorm(1,300,100))
vec.ruid
mean(vec.ruid)
mean(vec,trim=0.1)
mean(vec.ruid,trim=0.1)
mean(vec,trim=0.1)
mean(vec.ruid,trim=0.1)
median(vec.ruid)
median(vec)
```{r}
quantile(Sepal.Length,seq(0,1,0.01))
install.packages("mlbench")
library(mlbench)
library(mlbench)
data(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
quantile(Sepal.Length,seq(0,1,0.25))
data(iris)
attach(iris)
table(Species)
range(Sepal.Length)
nclass.Sturges(Sepal.Length)
seq(4.3, 7.9,length=nclass.Sturges(Sepal.Length))
median(Sepal.Length)
quantile(Sepal.Length,seq(0,1,0.01))
#percentil 0
min(Sepal.Length)
#percentil 100
max(Sepal.Length)
#percentil 50
median(Sepal.Length)
quantile(Sepal.Length,seq(0,1,0.25))
summary(iris)
tapply(Petal.Length,Species,summary)
tapply(Petal.Width,Species,summary)
tapply(Sepal.Length,Species,summary)
tapply(Sepal.Width,Species,summary)
max(Sepal.Length)-min(Sepal.Length)
var(Sepal.Length)
sd(Sepal.Length)
var(vec)
sd(vec)
var(vec.ruid)
sd(vec.ruid)
aad<-function(x,fun=median){
mean(abs(x-fun(x)))
}
aad(Sepal.Length)
edad=c(18,19,NA,18,24,17,22,15,22,25)
sexo=c(0,1,0,0,1,0,0,1,1,0)
estudios=c(1,2,0,1,3,2,3,1,2,3)
# Recodificamos como factores el sexo y el nivel de estudios, asignando las etiquetas adecuadas:
sexo=factor(sexo, levels=c(0,1),
labels=c("Hombre","Mujer"))
estudios=factor(estudios, levels=c(0,1,2,3),
labels=c("Sin estudios","Estudios Primarios",
"Estudios Secundarios","Estudios Superiores"))
datos<-cbind(edad, sexo, estudios)
datos
table(estudios, sexo)
prop.table(table(estudios, sexo))
prop.table(table(estudios,sexo),1)
prop.table(table(estudios,sexo),2)
ng("imagen.png")
png("imagen.png")
plot(1:10)
dev.off()
# dibuja una l?nea roja
plot(rnorm(15,10,5),col="red",type="l")
# dibuja puntos azules de tipo 1 (c?rculo)
lines(rnorm(15,10,5),col="blue",type="p",pch=2)
# dibuja l?nea con puntos rojos de tipo 2 (tri?ngulo)
lines(rnorm(15,10,5),col="green",type="b",pch=2)
title(main="Mi gr?fico")
legend('topright', c("lineas","puntos","ambos"), lty=1:3, col=c("red", "blue","green"), bty='n', cex=.75)
hist(Sepal.Length, col = "blue")
hist(Sepal.Length, col = "blue", nclass = 20)
barplot(prop.table(table(Species)), col = "blue")
hist(Sepal.Length, col = "blue",freq=FALSE)
lines(density(Sepal.Length),main="Densidad de Sepal.Length", col="red",lwd=2)
boxplot(Sepal.Length,main="Boxplot Sepal.Length")
boxplot(Sepal.Length~Species,ylab="Sepal.Length")
head(iris)
boxplot(glucose~pressure,ylab="glucose")
summary(PimaIndiansDiabetes
)
boxplot(glucose,ylab="glucose")
boxplot(PimaIndiansDiabetes$glucose,ylab="glucose")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$pressure,ylab="glucose")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$pressure,ylab="pressure")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$age,ylab="age")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$age,ylab="glucose")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$mass,ylab="mass")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$insulin,ylab="insulin")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$insulin,ylab="glucose")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$insulin,ylab="insulinaa")
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$insulin,ylab="insulina")
head(PimaIndiansDiabetes)
head(PimaIndiansDiabetes_stand)
head(PimaIndiansDiabetes_stand)
PimaIndiansDiabetes_stand<- scale(PimaIndiansDiabetes)
PimaIndiansDiabetes.stand<- scale(PimaIndiansDiabetes)
head(PimaIndiansDiabetes)
boxplot(PimaIndiansDiabetes$glucose~PimaIndiansDiabetes$insulin,ylab="insulina")
summary(PimaIndiansDiabetes)
summary(PimaIndiansDiabetes_stand)
boxplot(glucose~age,ylab="age"")
boxplot(glucose~age,ylab="age")
attach(PimaIndiansDiabetes);
boxplot(glucose~age,ylab="age")
hist(glucose, col = "blue",freq=FALSE)
lines(density(glucose),main="Densidad de Sepal.Length", col="red",lwd=2)
summary(PimaIndiansDiabetes)
attach(PimaIndiansDiabetes);
boxplot(glucose,ylab="age")
plot(glucose, col = "blue",freq=FALSE)
lines(density(glucose),main="Densidad de Sepal.Length", col="red",lwd=2)
plot(glucose, col = "blue",freq=FALSE)
barplot(table(diabetes),col="blue")
boxplot(glucose~diabetes,ylab="glucose")
boxplot(glucose~diabetes,ylab="glucose")
data <- read.csv("home/isa/Escritorio/wbl2019paneldata.xlsx")
library(openxlsx)
data <- read.xlsx("home/isa/Escritorio/wbl2019paneldata.xlsx")
data <- read.xlsx("home/isa/Escritorio/wbl2019paneldata.xlsx")
install.packages("readxl")
install.packages("xlsx")
data <- read.xlsx("home/isa/Escritorio/wbl2019paneldata.xlsx")
getwd()
data <- read.xlsx("wbl2019paneldata.xlsx")
head(data)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 2, header = TRUE))
head(data)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 3, header = TRUE))
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 'WBL2009', header = TRUE))
head(data)
require(XLConnect)
install.packages("XLConnect")
require(XLConnect)
wb = loadWorkbook("wbl2019paneldata.xlsx")
df = readWorksheet(wb, sheet = "WBL2009", header = TRUE)
require(XLConnect)
install.packages("XLConnect")
require(XLConnect)
library(XLConnect)
df = readWorksheet(wb, sheet = 0, header = TRUE)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = '0', header = TRUE))
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = '0', header = TRUE)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 0, header = TRUE)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 0)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 1)
View(data)
View(data)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 2)
View(data)
View(data)
head(data$Region)
view(data$Region)
list(data$Region)
summary(data$Region)
summary(data)
boxplot( Is.there.paid.parental.leave?~Is.dismissal.of.pregnant.workers.prohibited?)
attach(data)
barplot(table(Is.there.paid.parental.leave?),col="blue")
barplot(data$Is.there.paid.parental.leave?,col="blue")
barplot(data$Is.there.paid.parental.leave?)
barplot(table(data$Is.there.paid.parental.leave?))
barplot(table(data$Does.the.law.establish.explicit.pension.care.credits.for.periods.of.childcare?))
barplot(table(data$Does.the.law.establish.explicit.pension.care.credits.for.periods.of.childcare?)
barplot(table(GETTING.A.PENSION))
barplot(table(GETTING.A.PENSION~ HAVING.CHILDREN))
boxplot(table(GETTING.A.PENSION~ HAVING.CHILDREN))
boxplot(GETTING.A.PENSION~ HAVING.CHILDREN)
boxplot(GETTING.A.PENSION~ HAVING.CHILDREN,ylab="having children", xlab="getting pension")
km.res <- eclust(GETTING.A.PENSION, "kmeans", k = 3, nstart = 25, graph = FALSE)
library(factoextra)
library(cluster)
library(fpc)
library(NbClust)
km.res <- eclust(GETTING.A.PENSION, "kmeans", k = 3, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
km.res <- eclust(GETTING.A.PENSION, "kmeans", k = 3, nstart = 25, graph = FALSE)
boxplot(data$GETTING.A.PENSION~ HAVING.CHILDREN,ylab="having children", xlab="getting pension")
km.res <- eclust(data$GETTING.A.PENSION, "kmeans", k = 3, nstart = 25, graph = FALSE)
summary(GETTING.A.PENSION)
GETTING.A.PENSION
km.res <- eclust(data$GETTING.A.PENSION, "kmeans", k = 4, nstart = 25, graph = FALSE)
km.res <- eclust(na.omit(data$GETTING.A.PENSION), "kmeans", k = 4, nstart = 25, graph = FALSE)
km.res$centers
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
plot(km.res )
plot(km.res,data=data )
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
library("dplyr")
library(dplyr)
data_1<-select_if(data, is.numeric)
km.res <- eclust(na.omit(data_1), "kmeans", k = 4, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
fviz_cluster(km.res, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
res<-NbClust(na.omit(data_1), diss=NULL, distance = "manhattan", min.nc=4, max.nc=20,
method = "complete", index = "all")
fviz_nbclust(res)
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 2)
summary(data)
attach(data)
barplot(table(GETTING.A.PENSION))
boxplot(data$GETTING.A.PENSION~ HAVING.CHILDREN,ylab="having children", xlab="getting pension")
km.res_1 <- eclust(data_1, "kmeans", k = 11, nstart = 25, graph = FALSE)
# Vemos los valores de los centroides
km.res$centers
fviz_cluster(km.res_1, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
km.res_1 <- eclust(data_1, "kmeans", k = 11, nstart = 25, graph = FALSE)
km.res_1 <- eclust(na.omit(data_1), "kmeans", k = 11, nstart = 25, graph = FALSE)
km.res$centers
fviz_cluster(km.res_1, geom = "point", ellipse.type = "norm",
palette = "jco", ggtheme = theme_minimal())
data <- read.xlsx("wbl2019paneldata.xlsx", sheet = 2)
getwd()
fviz_nbclust(res)
shiny::runApp('Escritorio/Enlace hacia dataScience/scripts/helloShinny')
runApp('~/Escritorio/Enlace hacia dataScience/scripts/helloShinny')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Enlace hacia dataScience/scripts/shinnyClass')
runApp('Escritorio/Introduccion a Shiny.R')
runApp('Escritorio/Introduccion a Shiny.R')
install.packages(DT)
install.packages("DT")
runApp('Escritorio/Introduccion a Shiny.R')
runApp('Escritorio/Enlace hacia dataScience/scripts/visualizacion/Otros tipos de inputs.R')
runApp('Escritorio/Organizando la interfaz de usuario con Tabs.R')
install.packages('rsconnect')
install.packages("rsconnect")
library(shiny); runApp('Escritorio/Organizando la interfaz de usuario con Tabs.R')
runApp('Escritorio/Organizando la interfaz de usuario con Tabs.R')
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
knitr::opts_chunk$set(echo = TRUE)
remove(list = ls())
library(tidyverse)
datos <- read_csv("wbldata.csv")
datos$region[datos$region == "High income: OECD"] <- "OECD"
attach(datos)
View(datos)
View(datos)
View(datos)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
datos <- read_csv("wbldata.csv")
attach(datos)
remove(list = ls())
library(tidyverse)
datos <- read_csv("wbldata.csv")
attach(datos)
View(datos)
View(datos)
cols <- colSums(mapply('==', 'PERMISSIONS', datos))
new.df <- df[,which(cols == 0)]
cols <- colSums(mapply('==', 'No', datos))
new.df <- df[,which(cols == 0)]
cols <- colSums(mapply('==', 'No', datos))
new.df <- df[,which(cols == 0)]
New.testSet <- datos[!grepl("No",row.names(datos)),
!grepl("No", colnames(datos))]
View(New.testSet)
View(New.testSet)
New.testSet <- datos[grepl("No", colnames(datos))]
View(New.testSet)
View(New.testSet)
New.testSet <- datos[!grepl("No", colnames(datos))]
DATA_OK <-datos[,-match(("No*"),names(data))]
DATA_OK <-Filter(function(x) !any(x=="No"), datos)
View(DATA_OK)
View(DATA_OK)
View(New.testSet)
DATA_OK_SI <-Filter(function(x) !any(x=="Yes"), datos)
DATA <- df[,colSums(df=='Yes')==0]
DATA <- datos[,colSums(datos=='Yes')==0]
DATA <- datos[,colSums(datos=="No")==0]
DATA <- datos[,colSums(datos=="Caca")==0]
DATA_OK_SI <-Filter(function(x) !any(x=="Caca"), datos)
DATA_OK_SI <-Filter(function(x) !any(x=="Caca"), datos)
DATA_OK_CaCA <-Filter(function(x) !any(x=="Caca"), datos)
View(DATA_OK_CaCA)
View(DATA_OK_CaCA)
install.packages("dplyr")
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
New.testSet <- testSet[!grepl("Yes", colnames(datos))]
New.testSet <- datos[!grepl("Yes", colnames(datos))]
New.testSet <- datos[!grepl("100", colnames(datos))]
New.testSet <- datos[!grepl("100", colnames(datos))]
New.testSet <- datos[!grepl(100, colnames(datos))]
prueba <- datos[,!(datos[1,]==100)]
shiny::runApp('Escritorio/Enlace hacia dataScience/scripts/genderShinnyVisualization/prubea_countries')
datafiles <- c("shapes.txt", "trips.txt")
shiny::runApp('Escritorio/Enlace hacia dataScience/proyecto/DataScienceGenderEquityStudy/pruebasShinnyGender')
runApp('Escritorio/Enlace hacia dataScience/proyecto/DataScienceGenderEquityStudy/pruebasShinnyGender')
runApp('Escritorio/Enlace hacia dataScience/proyecto/DataScienceGenderEquityStudy/pruebasShinnyGender')
runApp('Escritorio/Enlace hacia dataScience/proyecto/DataScienceGenderEquityStudy/pruebasShinnyGender')
runApp('Escritorio/Enlace hacia dataScience/proyecto/DataScienceGenderEquityStudy/pruebasShinnyGender')
